// Generated by CoffeeScript 1.8.0
(function() {
  var DOM, Node, React, caffeine, registerTag, tagContent, tagName;

  React = require('react');

  DOM = React.DOM;

  Node = (function() {
    function Node(parent) {
      this.content = [];
      this.$ = parent;
      this.props = parent != null ? parent.props : void 0;
    }

    Node.prototype.register = function(tag, props, child) {
      this.content.push({
        tag: tag,
        props: props,
        child: child
      });
      return this;
    };

    Node.prototype.exec = function() {
      var op, _i, _len, _ref, _ref1, _results;
      _ref = this.content;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        _results.push(op.tag(op.props, (_ref1 = op.child) != null ? _ref1.exec() : void 0));
      }
      return _results;
    };

    return Node;

  })();

  registerTag = function(tagName, tagContent) {
    return Node.prototype[tagName] = (function(tag, content) {
      return function(props, fn) {
        if (typeof props === 'function') {
          fn = props;
          props = null;
        }
        return this.register(content, props || {}, fn != null ? fn.call(new Node(this.$)) : void 0);
      };
    })(tagName, tagContent);
  };

  for (tagName in DOM) {
    tagContent = DOM[tagName];
    registerTag(tagName, tagContent.bind(DOM));
  }

  registerTag('text', function(props) {
    return props;
  });

  caffeine = function(component, fn) {
    return (fn || component).call(new Node(fn && component)).exec()[0];
  };

  caffeine.register = function(tags) {
    var tagBody, _results;
    _results = [];
    for (tagName in tags) {
      tagBody = tags[tagName];
      _results.push(registerTag(tagName, (function(body) {
        return function(props, children) {
          return React.createElement(body, props, children);
        };
      })(tagBody)));
    }
    return _results;
  };

  module.exports = caffeine;

}).call(this);
